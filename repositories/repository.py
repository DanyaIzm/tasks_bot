from collections.abc import Iterable
from typing import Protocol

from models import Task, User


class UserRepository(Protocol):
    def find(self, id: int) -> User | None: ...

    def get_users(self) -> Iterable[User]: ...

    def add_user(self, user: User) -> None: ...


class TaskRepository(Protocol):
    def get(self, task_id: int) -> Task: ...

    def get_by_keyword(self, keyword: str) -> Iterable[Task]: ...

    def find_completed(self) -> Iterable[Task]: ...

    def find_uncompleted(self) -> Iterable[Task]: ...

    def get_tasks(self) -> Iterable[Task]: ...

    def get_tasks_by_user_id(self, user_id: int) -> Task: ...

    def add_task(self, name: str, description: str, user_id: int) -> None: ...

    def update(self, task: Task) -> None: ...

    def delete_completed(self) -> None: ...
